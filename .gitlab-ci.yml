variables:
  IMAGE_NAME: registry.gitlab.com/testowe7261437/python_cellular_automata_website
  IMAGE_TAG: python-cellular-automata-app
  DOCKER_TLS_CERTDIR: "/certs" 

stages:
  - test
  - build
  - deploy
  - cleanup

run_tests:
  stage: test
  image: python:3.12
  before_script:
    - python -v
    - pip â€“version
    - pip install --upgrade pip  # Upgrade pip to the latest version
    - pip install -r requirements.txt
  script:    
    - python3 --version  # Check Python version
    - pip3 --version     # Check pip version
    - echo "Running tests"
    - pytest test_the_app.py

build_image:
  stage: build
  image: docker:latest
  services:
  - docker:dind
  before_script:
   - echo "Logging in to GitLab Container Registry"
   - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    - docker image prune -a
    - docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .
    - docker push ${IMAGE_NAME}:${IMAGE_TAG}
  only:
    changes:
      - Dockerfile
      - requirements.txt
      - app.py
      - static/*
      - templates/*
      - .gitlab-ci.yml

deploy:
  stage: deploy
  interruptible: true
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD} ${CI_REGISTRY}
  script:
    # Pull the latest image built
    - docker pull ${IMAGE_NAME}:${IMAGE_TAG}

    # Stop and remove the old container if it exists
    #- docker ps -q --filter "name=python-app" | xargs -r docker stop
    #- docker ps -a -q --filter "name=python-app" | xargs -r docker rm
    #- docker ps -q --filter "name=python-app" | ForEach-Object { docker stop $_ }
    #- docker ps -q --filter "name=python-app" | ForEach-Object { docker rm $_ }
    - |
      $existing_container = docker ps -aq --filter "name=python-app"
      if ($existing_container) {
        docker stop $existing_container
        docker rm $existing_container
      }

    # Run the new container
    - docker run -d --name python-app --restart=always -p 4000:80 "${IMAGE_NAME}:${IMAGE_TAG}"
  only:
    - main

# Optional Cleanup Stage: Clean up old Docker images
cleanup:
  stage: cleanup
  image: docker:latest
  services:
    - docker:dind
  script:
    # Remove dangling images
    - docker image prune -f
  when: always